.data
    endl:    .asciiz  "\n"   # used for cout << endl;
    sumlbl:    .asciiz  "Sum: " # label for sum
    revlbl:    .asciiz  "Reversed Number: " # label for rev
    pallbl:    .asciiz  "Is Palindrome: " # label for isPalindrome
    sumarr:    .word 1
               .word 3
               .word 44
               .word 66
               .word 88
               .word 90
               .word 9
               .word 232
               .word 4325
               .word 2321
    arr:       .word 1
               .word 2
               .word 3
               .word 4
               .word 5
               .word 4
               .word 3
               .word 2
               .word 1

.text

# sum               --> $s0
# address of sumarr --> $s1
# rev               --> $s2
# num               --> $s3
# isPalindrome      --> $s4
# address of arr    --> $s5
# i                 --> $t0
# beg               --> $s6
# end               --> $s7
# d                 --> $t1
# 10                --> $t2
# 100               --> $t3
main:



li $s0, 0 # sum               --> $s0
la $s1, sumarr # address of sumarr --> $s1
li $t0, 0 # i                 --> $t0
#For variable size, I will just be using int 10

FOR:
beq $t0, 10, End
sll $t1, $t0, 2       # Setting theindexable i
add $t1, $t1, $s1
lw $t1, 0($t1)
add $s0, $s0, $t1
addi $t0, $t0, 1
j FOR

End:

li $t5,45689 # Setting int num = 45689
li $s2,0 # Setting int rev = 0
li $t1,-1 # Setting int d = -1
li $t4,10

loop2:
blez $t5,exit2
div $t5,$t4 # d = num % 10
mfhi $t1
mflo $t5
mul $s2,$s2,10 # Using rev = rev * 10
add $s2,$s2,$t1 # Using rev = rev + d
j loop2

exit2:

la $s5,arr

addi $s1,$s1,32
li $s6,0 #int beg = 0
li $s7,8 #int end = 8
li $s4,1 # int ispalindrome = 1
loop3:
bge $s6,$s7,exit #while loop condition
lw $1,($s5)
lw $2,($s1)
bne $1,$2,ispalindrome
addi $s6,$s6,1
subi $s7,$s7,1
addi $s6,$s6,4
subi $s1,$s1,4
j loop3
ispalindrome:

li $s4,1
j exit



exit:

  la   $a0, sumlbl    # puts sumlbl into arg0 (a0 register) for cout
  addi $v0, $0, 4     # puts 4 in v0 which denotes we are printing a string
  syscall             # make a syscall to system

  move $a0, $s0       # puts sum into arg0 (a0 register) for cout
  addi $v0, $0, 1     # puts 1 in v0 to denote we are printing an int
  syscall             # make a syscall to system

  la   $a0, endl      # puts the address of the string endl into a0
  addi $v0, $0, 4     # puts 4 into v0 saying we are printing a string
  syscall

  la   $a0, revlbl    # puts revlbl into arg0 (a0 register) for cout
  addi $v0, $0, 4     # puts 4 in v0 which denotes we are printing an string
  syscall             # make a syscall to system

  move $a0, $s2       # puts rev into arg0 (a0 register) for cout
  addi $v0, $0, 1     # puts 1 in v0 to denote we are printing an int
  syscall             # make a syscall to system

  la   $a0, endl      # puts the address of the string endl into a0
  addi $v0, $0, 4     # puts 4 into v0 saying we are printing a string
  syscall

  la   $a0, pallbl    # puts pallbl into arg0 (a0 register) for cout
  addi $v0, $0, 4     # puts 4 in v0 which denotes we are printing a string
  syscall             # make a syscall to system

  move $a0, $s4       # puts isPalindrome into arg0 (a0 register) for cout
  addi $v0, $0, 1     # puts 1 in v0 to denote we are printing an int
  syscall             # make a syscall to system

  la   $a0, endl      # puts the address of the string endl into a0
  addi $v0, $0, 4     # puts 4 into v0 saying we are printing a string
  syscall


  addi $v0,$0, 10
  syscall
